openapi: 3.0.1
info:
  title: Data Logger Server
  description: 'This is a central server for the use of a data storage and data processing.'
  contact:
    email: maximilian.nessen@uni-jena.de
  version: 1.0.0
servers:
- url: https://api.datalogger.de
tags:
- name: data
  description: Sending data to the server for futher processing
- name: user
  description: Operations about user
paths:
  /data:
    post:
      tags:
      - data
      summary: Post a new data object 
      operationId: addData
      requestBody:
        description: Data object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Data'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
        500: 
          description: Server error
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /data/findSetById:
    get:
      tags:
      - data
      summary: Finds data set by id 
      description: Looks for a special dataset via a provided ID
      operationId: findDatabyId
      parameters:
      - name: data_Id
        in: query
        description: ID of specific data set
        required: true
        style: form
        explode: true
        schema:
          type: number
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Data'
        400:
          description: Invalid id value
          content: {}
        404:
          description: Id not found
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /data/findSetsByStationId:
    get:
      tags:
      - data
      summary: Finds data sets from a specific station
      description: Finds a specific data set for a given station
      operationId: findSetsByStationId
      parameters:
      - name: station_id
        in: query
        description: ID for a specific station
        required: true
        style: form
        explode: true
        schema:
          type: number
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Data'
        400:
          description: Invalid id given
          content: {}
        404:
          description: station not found
          content: {}
        500: 
          description: Server error
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /user:
    post:
      tags:
      - user
      summary: Register as new user
      description: Register as a new user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      parameters:
      - name: userId
        in: query
        description: User ID 
        required: true
        schema:
          type: number
      responses:
        200:
          description: successful operation
          content: {}
  /user/{userId}:
    get:
      tags:
      - user
      summary: Get user by Id
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        description: User Id to fetch User
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    patch:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        description: The user id of a user that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
  /users:
    get:
      tags:
      - user
      summary: get a list of all users
      description: get list of all current users
      operationId: getUsers
      responses:
        200:
          description: successful operation
          content: {}
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
    Data:
      required:
      - station_id
      - airpressure
      - humidity
      - temperature
      - timestamp
      - latitude
      - longitude
      type: object
      properties:
        station_id:
          type: integer
          format: int64
        airpressure:
          type: number
          example: 1013.25 
        humidity:
          type: number
          example: 80.0
        temperature:
          type: number
          example: 32.3
        timestamp:
          type: integer
          example: 1570892386
        latitude:
          type: number
          example: 50.9271
        longitude:
          type: number
          example: 11.5892
        position_tag:
          type: string
          example: 'kitchen'
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
